-- MySQL Script generated by MySQL Workbench
-- Fri Sep  9 17:38:21 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema infinite_knowledge
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `infinite_knowledge` ;

-- -----------------------------------------------------
-- Schema infinite_knowledge
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `infinite_knowledge` DEFAULT CHARACTER SET utf8 ;
USE `infinite_knowledge` ;

-- -----------------------------------------------------
-- Table `infinite_knowledge`.`director_academico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`director_academico` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`director_academico` (
  `director_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `anios_labor` TINYINT UNSIGNED NOT NULL,
  `genero` VARCHAR(6) NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`director_academico_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_director_academico_dni` ON `infinite_knowledge`.`director_academico` (`dni` ASC);

CREATE UNIQUE INDEX `idx_director_academico_numero_telefonico` ON `infinite_knowledge`.`director_academico` (`numero_telefonico` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`auxiliar_academico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`auxiliar_academico` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`auxiliar_academico` (
  `auxiliar_academico_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `n_docentes_a_cargo` TINYINT UNSIGNED NOT NULL,
  `genero` VARCHAR(6) NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`auxiliar_academico_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_auxiliar_academico_dni` ON `infinite_knowledge`.`auxiliar_academico` (`dni` ASC);

CREATE UNIQUE INDEX `idx_auxiliar_academico_numero_telefonico` ON `infinite_knowledge`.`auxiliar_academico` (`numero_telefonico` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`docente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`docente` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`docente` (
  `docente_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `genero` VARCHAR(6) NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  `grado_academico` VARCHAR(40) NOT NULL,
  `especialidad_academica` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`docente_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_docente_dni` ON `infinite_knowledge`.`docente` (`dni` ASC);

CREATE UNIQUE INDEX `idx_docente_numero_telefonico` ON `infinite_knowledge`.`docente` (`numero_telefonico` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`estudiante`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`estudiante` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`estudiante` (
  `estudiante_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `apellido_paterno` VARCHAR(50) NOT NULL,
  `apellido_materno` VARCHAR(50) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `genero` VARCHAR(6) NOT NULL,
  `numero_telefonico` CHAR(9) NOT NULL,
  PRIMARY KEY (`estudiante_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_estudiante_dni` ON `infinite_knowledge`.`estudiante` (`dni` ASC);

CREATE UNIQUE INDEX `idx_estudiante_numero_telefonico` ON `infinite_knowledge`.`estudiante` (`numero_telefonico` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`curso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`curso` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`curso` (
  `curso_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `n_horas_por_semana` TINYINT UNSIGNED NOT NULL,
  `enfoque` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`curso_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_curso_nombre` ON `infinite_knowledge`.`curso` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`registro_calificaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`registro_calificaciones` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`registro_calificaciones` (
  `docente_id` INT UNSIGNED NOT NULL,
  `estudiante_id` INT UNSIGNED NOT NULL,
  `curso_id` INT UNSIGNED NOT NULL,
  `salon_clases` CHAR(2) NOT NULL,
  `calif1` TINYINT UNSIGNED NULL,
  `calif2` TINYINT UNSIGNED NULL,
  `calif3` TINYINT UNSIGNED NULL,
  `promedio_final` TINYINT UNSIGNED NULL,
  `estado_aprobacion` VARCHAR(50) NULL,
  `fecha_emision` DATE NULL,
  PRIMARY KEY (`docente_id`, `estudiante_id`, `curso_id`),
  CONSTRAINT `fk_registro_calificaciones_docente_id`
    FOREIGN KEY (`docente_id`)
    REFERENCES `infinite_knowledge`.`docente` (`docente_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_registro_calificaciones_estudiante_id`
    FOREIGN KEY (`estudiante_id`)
    REFERENCES `infinite_knowledge`.`estudiante` (`estudiante_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_registro_calificaciones_curso_id`
    FOREIGN KEY (`curso_id`)
    REFERENCES `infinite_knowledge`.`curso` (`curso_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_registro_calificaciones_estudiante_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`estudiante_id` ASC);

CREATE INDEX `fk_registro_calificaciones_curso_id_idx` ON `infinite_knowledge`.`registro_calificaciones` (`curso_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`registro_asistencias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`registro_asistencias` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`registro_asistencias` (
  `docente_id` INT UNSIGNED NOT NULL,
  `estudiante_id` INT UNSIGNED NOT NULL,
  `curso_id` INT UNSIGNED NOT NULL,
  `salon_clases` CHAR(2) NOT NULL,
  `n_asistencias_realizadas` SMALLINT UNSIGNED NULL,
  `n_faltas_realizadas` SMALLINT UNSIGNED NULL,
  `n_justificaciones_realizadas` SMALLINT UNSIGNED NULL,
  `n_total_asistencias` SMALLINT UNSIGNED NULL,
  `fecha_emision` DATE NULL,
  PRIMARY KEY (`docente_id`, `estudiante_id`, `curso_id`),
  CONSTRAINT `fk_registro_asistencias_docente_id`
    FOREIGN KEY (`docente_id`)
    REFERENCES `infinite_knowledge`.`docente` (`docente_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_registro_asistencias_estudiante_id`
    FOREIGN KEY (`estudiante_id`)
    REFERENCES `infinite_knowledge`.`estudiante` (`estudiante_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_registro_asistencias_curso_id`
    FOREIGN KEY (`curso_id`)
    REFERENCES `infinite_knowledge`.`curso` (`curso_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_registro_asistencias_estudiante_id_idx` ON `infinite_knowledge`.`registro_asistencias` (`estudiante_id` ASC);

CREATE INDEX `fk_registro_asistencias_curso_id_idx` ON `infinite_knowledge`.`registro_asistencias` (`curso_id` ASC);


-- -----------------------------------------------------
-- Table `infinite_knowledge`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `infinite_knowledge`.`usuario` ;

CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`usuario` (
  `usuario_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` CHAR(8) NOT NULL,
  `correo_electronico` VARCHAR(100) NOT NULL,
  `contrasenia` VARCHAR(50) NOT NULL,
  `rol` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`usuario_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idx_usuario_correo_electronico` ON `infinite_knowledge`.`usuario` (`correo_electronico` ASC);

-- -----------------------------------------------------
-- Table `infinite_knowledge`.`docente_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `infinite_knowledge`.`docente_curso` (
  `docente_id` INT UNSIGNED NOT NULL,
  `curso_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`docente_id`, `curso_id`),
  CONSTRAINT `fk_docente_curso_docente_id`
    FOREIGN KEY (`docente_id`)
    REFERENCES `infinite_knowledge`.`docente` (`docente_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_docente_curso_curso_id`
    FOREIGN KEY (`curso_id`)
    REFERENCES `infinite_knowledge`.`curso` (`curso_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_docente_curso_curso_id_idx` ON `infinite_knowledge`.`docente_curso` (`curso_id` ASC);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_insertar;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_buscar_por_id;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_buscar_por_dni;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_buscar_datos_para_email;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_buscar_nombre_completo;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_eliminar;
DROP PROCEDURE IF EXISTS sp_auxiliar_academico_actualizar;
DROP PROCEDURE IF EXISTS sp_curso_insertar;
DROP PROCEDURE IF EXISTS sp_curso_buscar_por_id;
DROP PROCEDURE IF EXISTS sp_curso_listar;
DROP PROCEDURE IF EXISTS sp_curso_listar_nombres_por_dni_estudiante;
DROP PROCEDURE IF EXISTS sp_curso_listar_nombres_por_dni_estudiante2;
DROP PROCEDURE IF EXISTS sp_curso_listar_nombres_por_dni_docente;
DROP PROCEDURE IF EXISTS sp_curso_listar_nombres_por_dni_docente2;
DROP PROCEDURE IF EXISTS sp_curso_eliminar;
DROP PROCEDURE IF EXISTS sp_curso_actualizar;
DROP PROCEDURE IF EXISTS sp_director_academico_insertar;
DROP PROCEDURE IF EXISTS sp_director_academico_buscar_por_id;
DROP PROCEDURE IF EXISTS sp_director_academico_buscar_por_dni;
DROP PROCEDURE IF EXISTS sp_director_academico_buscar_datos_para_email;
DROP PROCEDURE IF EXISTS sp_director_academico_buscar_nombre_completo;
DROP PROCEDURE IF EXISTS sp_director_academico_eliminar;
DROP PROCEDURE IF EXISTS sp_director_academico_actualizar;
DROP PROCEDURE IF EXISTS sp_docente_insertar;
DROP PROCEDURE IF EXISTS sp_docente_buscar_por_id;
DROP PROCEDURE IF EXISTS sp_docente_buscar_por_dni;
DROP PROCEDURE IF EXISTS sp_docente_buscar_por_nombre_completo;
DROP PROCEDURE IF EXISTS sp_docente_buscar_datos_para_email;
DROP PROCEDURE IF EXISTS sp_docente_buscar_datos_para_informe_de_verificacion;
DROP PROCEDURE IF EXISTS sp_docente_buscar_nombre_completo_por_dni;
DROP PROCEDURE IF EXISTS sp_docente_listar;
DROP PROCEDURE IF EXISTS sp_docente_eliminar;
DROP PROCEDURE IF EXISTS sp_docente_actualizar;
DROP PROCEDURE IF EXISTS sp_docente_curso_insertar;
DROP PROCEDURE IF EXISTS sp_docente_curso_listar_para_docente;
DROP PROCEDURE IF EXISTS sp_estudiante_insertar;
DROP PROCEDURE IF EXISTS sp_estudiante_buscar_por_id;
DROP PROCEDURE IF EXISTS sp_estudiante_buscar_por_dni;
DROP PROCEDURE IF EXISTS sp_estudiante_buscar_por_nombre_completo;
DROP PROCEDURE IF EXISTS sp_estudiante_buscar_nombre_completo_por_dni;
DROP PROCEDURE IF EXISTS sp_estudiante_listar;
DROP PROCEDURE IF EXISTS sp_estudiante_listar_para_docente;
DROP PROCEDURE IF EXISTS sp_estudiante_listar_nombres;
DROP PROCEDURE IF EXISTS sp_estudiante_eliminar;
DROP PROCEDURE IF EXISTS sp_estudiante_actualizar;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_insertar;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_actualizar;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_buscar_por_id_de_estudiante;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_buscar_por_dni_de_estudiante;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_buscar_para_docente;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_buscar_registro_especifico;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_eliminar;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_insertar;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_actualizar;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_buscar_por_id_de_estudiante;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_buscar_por_dni_de_estudiante;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_buscar_para_docente;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_buscar_registro_especifico;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_eliminar;
DROP PROCEDURE IF EXISTS sp_usuario_insertar;
DROP PROCEDURE IF EXISTS sp_usuario_actualizar;
DROP PROCEDURE IF EXISTS sp_usuario_eliminar;
DROP PROCEDURE IF EXISTS sp_usuario_realizar_inicio_de_sesión;
DROP PROCEDURE IF EXISTS sp_usuario_contar_usuarios_por_rol;
DROP PROCEDURE IF EXISTS sp_usuario_buscar_correo_por_dni;
DROP PROCEDURE IF EXISTS sp_usuario_buscar_rol_por_dni;
DROP PROCEDURE IF EXISTS sp_registro_asistencias_total_asistencias_c;
DROP PROCEDURE IF EXISTS sp_registro_calificaciones_actualizar_datos_c;
DROP TRIGGER IF EXISTS t_auxiliar_academico_actualizar_au;
DROP TRIGGER IF EXISTS t_auxiliar_academico_eliminar_bd;
DROP TRIGGER IF EXISTS t_director_academico_actualizar_au;
DROP TRIGGER IF EXISTS t_director_academico_eliminar_bd;
DROP TRIGGER IF EXISTS t_docente_actualizar_au;
DROP TRIGGER IF EXISTS t_docente_aumentar_n_docentes_ai;
DROP TRIGGER IF EXISTS t_docente_eliminar_bd;
DROP TRIGGER IF EXISTS t_estudiante_actualizar_au;
DROP TRIGGER IF EXISTS t_estudiante_eliminar_bd;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_insertar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    n_docentes_a_cargo_ TINYINT,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40)
)
BEGIN
    INSERT INTO infinite_knowledge.auxiliar_academico(dni,nombre,apellido_paterno,apellido_materno,fecha_nacimiento,
    n_docentes_a_cargo,genero,numero_telefonico,grado_academico) VALUES (dni_,nombre_,apellido_paterno_,apellido_materno_,
    fecha_nacimiento_,n_docentes_a_cargo_,genero_,numero_telefonico_,grado_academico_); 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_buscar_por_id(
)
BEGIN
    SELECT auxiliar_academico.auxiliar_academico_id,auxiliar_academico.dni, auxiliar_academico.nombre, auxiliar_academico.apellido_paterno, auxiliar_academico.apellido_materno,
    auxiliar_academico.fecha_nacimiento,
    auxiliar_academico.n_docentes_a_cargo,auxiliar_academico.genero,auxiliar_academico.numero_telefonico,auxiliar_academico.grado_academico, CONCAT(auxiliar_academico.apellido_paterno,' '
    ,auxiliar_academico.apellido_materno,' ',auxiliar_academico.nombre) AS nombre_completo 
    FROM infinite_knowledge.auxiliar_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_buscar_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT auxiliar_academico.auxiliar_academico_id,auxiliar_academico.dni, auxiliar_academico.nombre, auxiliar_academico.apellido_paterno, auxiliar_academico.apellido_materno,
    auxiliar_academico.fecha_nacimiento,
    auxiliar_academico.n_docentes_a_cargo,auxiliar_academico.genero,auxiliar_academico.numero_telefonico,auxiliar_academico.grado_academico,CONCAT(auxiliar_academico.apellido_paterno,' '
    ,auxiliar_academico.apellido_materno,' ',auxiliar_academico.nombre) AS nombre_completo 
    FROM infinite_knowledge.auxiliar_academico
    WHERE auxiliar_academico.dni = dni_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_buscar_datos_para_email(
)
BEGIN
    SELECT auxiliar_academico.auxiliar_academico_id,auxiliar_academico.dni, 
    CONCAT(auxiliar_academico.apellido_paterno,' ',auxiliar_academico.apellido_materno,' ',auxiliar_academico.nombre) 
    AS nombre_completo FROM infinite_knowledge.auxiliar_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_buscar_nombre_completo(
)
BEGIN
    SELECT CONCAT(auxiliar_academico.apellido_paterno,' ',auxiliar_academico.apellido_materno,' ',auxiliar_academico.nombre) 
    AS nombre_completo FROM infinite_knowledge.auxiliar_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_eliminar(
)
BEGIN
    DELETE FROM infinite_knowledge.auxiliar_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_auxiliar_academico_actualizar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    n_docentes_a_cargo_ TINYINT,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40)
)
BEGIN
    UPDATE infinite_knowledge.auxiliar_academico SET auxiliar_academico.dni = dni_, auxiliar_academico.nombre = nombre_,auxiliar_academico.apellido_paterno = 
    apellido_paterno_,auxiliar_academico.apellido_materno = apellido_materno_,auxiliar_academico.fecha_nacimiento = fecha_nacimiento_,auxiliar_academico.n_docentes_a_cargo 
    = n_docentes_a_cargo_,auxiliar_academico.genero = genero_,auxiliar_academico.numero_telefonico = numero_telefonico_,auxiliar_academico.grado_academico = 
    grado_academico_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_insertar(
	IN nombre_ VARCHAR(45),
    n_horas_por_semana_ TINYINT,
    enfoque_ VARCHAR(50)
)
BEGIN
    INSERT INTO infinite_knowledge.curso(curso.nombre,curso.n_horas_por_semana,curso.enfoque) 
    VALUES (nombre_,n_horas_por_semana_,enfoque_);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_buscar_por_id(
	IN curso_id_ INT
)
BEGIN
     SELECT curso.curso_id, curso.nombre, curso.n_horas_por_semana, curso.enfoque
     FROM infinite_knowledge.curso WHERE curso.curso_id = curso_id_ ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_listar(
)
BEGIN
     SELECT curso.curso_id, curso.nombre, curso.n_horas_por_semana, curso.enfoque
     FROM infinite_knowledge.curso ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_listar_nombres_por_dni_estudiante(
    IN dni_ CHAR(8)
)
BEGIN
    SELECT DISTINCT curso.curso_id, curso.nombre FROM (infinite_knowledge.curso INNER JOIN infinite_knowledge.registro_asistencias 
    ON curso.curso_id = registro_asistencias.curso_id) INNER JOIN infinite_knowledge.estudiante ON estudiante.estudiante_id = 
    registro_asistencias.estudiante_id WHERE estudiante.dni = dni_  ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_listar_nombres_por_dni_estudiante2(
    IN dni_ CHAR(8)
)
BEGIN
    SELECT DISTINCT curso.curso_id, curso.nombre FROM (infinite_knowledge.curso INNER JOIN infinite_knowledge.registro_calificaciones 
    ON curso.curso_id = registro_calificaciones.curso_id) INNER JOIN infinite_knowledge.estudiante ON estudiante.estudiante_id = 
    registro_calificaciones.estudiante_id WHERE estudiante.dni = dni_  ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_listar_nombres_por_dni_docente(
    IN dni_ CHAR(8)
)
BEGIN
    SELECT DISTINCT curso.curso_id, curso.nombre FROM (infinite_knowledge.curso INNER JOIN infinite_knowledge.registro_asistencias 
    ON curso.curso_id = registro_asistencias.curso_id) INNER JOIN infinite_knowledge.docente ON docente.docente_id = registro_asistencias.docente_id
    WHERE docente.dni = dni_  ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_listar_nombres_por_dni_docente2(
    IN dni_ CHAR(8)
)
BEGIN
    SELECT DISTINCT curso.curso_id, curso.nombre FROM (infinite_knowledge.curso INNER JOIN infinite_knowledge.registro_calificaciones 
    ON curso.curso_id = registro_calificaciones.curso_id) INNER JOIN infinite_knowledge.docente ON docente.docente_id = registro_calificaciones.docente_id
    WHERE docente.dni = dni_  ORDER BY curso.curso_id ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_eliminar(
	IN curso_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.curso WHERE curso.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_curso_actualizar(
	IN curso_id_ INT,
	nombre_ VARCHAR(45),
    n_horas_por_semana_ TINYINT,
    enfoque_ VARCHAR(50)
)
BEGIN
    UPDATE infinite_knowledge.curso SET curso.nombre = nombre_,curso.n_horas_por_semana = n_horas_por_semana_, curso.enfoque = enfoque_ WHERE curso.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_insertar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    anios_labor_ TINYINT,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40)
)
BEGIN
    INSERT INTO infinite_knowledge.director_academico(dni,nombre,apellido_paterno,apellido_materno,fecha_nacimiento,anios_labor,
    genero,numero_telefonico,grado_academico) VALUES (dni_,nombre_,apellido_paterno_,apellido_materno_,fecha_nacimiento_,anios_labor_,
    genero_,numero_telefonico_,grado_academico_); 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_buscar_por_id(
)
BEGIN
    SELECT director_academico.director_academico_id,director_academico.dni,director_academico.nombre,director_academico.apellido_paterno,director_academico.apellido_materno,
    director_academico.fecha_nacimiento,director_academico.anios_labor,
    director_academico.genero,director_academico.numero_telefonico,director_academico.grado_academico, CONCAT(director_academico.apellido_paterno,' ',
    director_academico.apellido_materno,' ',director_academico.nombre) AS nombre_completo FROM infinite_knowledge.director_academico; 
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE sp_director_academico_buscar_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT director_academico.director_academico_id,director_academico.dni, director_academico.nombre,director_academico.apellido_paterno,director_academico.apellido_materno,
    director_academico.fecha_nacimiento,director_academico.anios_labor,
    director_academico.genero,director_academico.numero_telefonico,director_academico.grado_academico, CONCAT(director_academico.apellido_paterno,' ',
    director_academico.apellido_materno,' ',director_academico.nombre) AS nombre_completo FROM infinite_knowledge.director_academico 
    WHERE director_academico.dni = dni_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_buscar_datos_para_email(
)
BEGIN
    SELECT director_academico.director_academico_id,director_academico.dni, CONCAT(director_academico.apellido_paterno,' ',director_academico.apellido_materno,' ',
    director_academico.nombre) AS nombre_completo FROM infinite_knowledge.director_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_buscar_nombre_completo(
)
BEGIN
    SELECT CONCAT(director_academico.apellido_paterno,' ',director_academico.apellido_materno,' ',director_academico.nombre) AS nombre_completo 
    FROM infinite_knowledge.director_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_eliminar(
)
BEGIN
    DELETE FROM infinite_knowledge.director_academico; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_director_academico_actualizar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    anios_labor_ TINYINT,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40)
)
BEGIN
    UPDATE infinite_knowledge.director_academico SET director_academico.dni = dni_, director_academico.nombre = nombre_,director_academico.apellido_paterno = 
    apellido_paterno_,director_academico.apellido_materno = apellido_materno_,director_academico.fecha_nacimiento = fecha_nacimiento_,director_academico.anios_labor = 
    anios_labor_,director_academico.genero = genero_,director_academico.numero_telefonico = numero_telefonico_,director_academico.grado_academico = 
    grado_academico_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_insertar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40),
    especialidad_academica_ VARCHAR(40)
)
BEGIN
    INSERT INTO infinite_knowledge.docente(dni,nombre,apellido_paterno,apellido_materno,fecha_nacimiento,genero,numero_telefonico,grado_academico,
    especialidad_academica) VALUES (dni_,nombre_,apellido_paterno_,apellido_materno_,fecha_nacimiento_,genero_,numero_telefonico_,grado_academico_,
    especialidad_academica_); 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_por_id(
	IN docente_id_ INT
)
BEGIN
    SELECT docente.docente_id,docente.dni,docente.nombre,docente.apellido_paterno,docente.apellido_materno,docente.fecha_nacimiento, docente.genero, 
    docente.numero_telefonico, docente.grado_academico, docente.especialidad_academica, CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS 
    nombre_completo FROM infinite_knowledge.docente WHERE 
    docente.docente_id = docente_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT docente.docente_id,docente.dni,docente.nombre,docente.apellido_paterno,docente.apellido_materno, docente.fecha_nacimiento, docente.genero, 
    docente.numero_telefonico, docente.grado_academico, docente.especialidad_academica, CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS 
    nombre_completo FROM infinite_knowledge.docente WHERE 
    docente.dni = dni_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_por_nombre_completo(
	IN nombre_completo_ VARCHAR(152)
)
BEGIN
	SELECT docente.docente_id,docente.dni,CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS 
    nombre_completo, docente.fecha_nacimiento, docente.genero, docente.numero_telefonico, docente.grado_academico, docente.especialidad_academica FROM infinite_knowledge.docente 
    WHERE CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) LIKE 
    CONCAT('%',nombre_completo_,'%') ORDER BY docente.docente_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_datos_para_email(
	IN docente_id_ INT
)
BEGIN
    SELECT docente.docente_id,docente.dni,CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS nombre_completo WHERE docente.docente_id = 
    docente_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_datos_para_informe_de_verificacion(
	IN docente_id_ INT
)
BEGIN
    SELECT docente.docente_id,docente.dni,CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS nombre_completo,docente.grado_academico,
    docente.especialidad_academica FROM infinite_knowledge.docente WHERE docente.docente_id = docente_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_buscar_nombre_completo_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS nombre_completo FROM infinite_knowledge.docente WHERE docente.dni = dni_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_listar(
)
BEGIN
    SELECT docente.docente_id,docente.nombre,docente.dni,docente.apellido_paterno,docente.apellido_materno,CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS 
    nombre_completo, docente.fecha_nacimiento, docente.genero, docente.numero_telefonico, docente.grado_academico, docente.especialidad_academica FROM infinite_knowledge.docente 
    ORDER BY docente.docente_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_eliminar(
	IN docente_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.docente WHERE docente.docente_id = docente_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_actualizar(
	IN docente_id_ INT,
    dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9),
    grado_academico_ VARCHAR(40),
    especialidad_academica_ VARCHAR(40)
)
BEGIN
    UPDATE infinite_knowledge.docente SET docente.dni=dni_,docente.nombre=nombre_,docente.apellido_paterno=apellido_paterno_,docente.apellido_materno=apellido_materno_,
    docente.fecha_nacimiento=fecha_nacimiento_,docente.genero=genero_, docente.numero_telefonico=numero_telefonico_,docente.grado_academico=grado_academico_,
    docente.especialidad_academica=especialidad_academica_ WHERE docente.docente_id = docente_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_curso_insertar(
	IN docente_id_ INT,
	curso_id_ INT
)
BEGIN
    INSERT INTO infinite_knowledge.docente_curso(docente_id,curso_id) VALUES 
    (docente_id_,curso_id_); 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_docente_curso_listar_para_docente(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT docente_curso.docente_id,docente_curso.curso_id FROM infinite_knowledge.docente_curso INNER JOIN infinite_knowledge.docente ON docente_curso.docente_id = docente.docente_id 
    WHERE docente.dni = dni_;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE sp_estudiante_insertar(
	IN dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9)
)
BEGIN
    INSERT INTO infinite_knowledge.estudiante(dni,nombre,apellido_paterno,apellido_materno,fecha_nacimiento,genero,numero_telefonico) VALUES 
    (dni_,nombre_,apellido_paterno_,apellido_materno_,fecha_nacimiento_,genero_,numero_telefonico_); 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_buscar_por_id(
	IN estudiante_id_ INT
)
BEGIN
    SELECT estudiante.estudiante_id,estudiante.dni,estudiante.nombre,estudiante.apellido_paterno,estudiante.apellido_materno,
    estudiante.fecha_nacimiento, estudiante.genero, estudiante.numero_telefonico, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS 
    nombre_completo FROM infinite_knowledge.estudiante
    WHERE estudiante.estudiante_id = estudiante_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_buscar_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT estudiante.estudiante_id,estudiante.dni,estudiante.nombre,estudiante.apellido_paterno,estudiante.apellido_materno, 
    estudiante.fecha_nacimiento, estudiante.genero, estudiante.numero_telefonico, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS 
    nombre_completo FROM infinite_knowledge.estudiante
    WHERE estudiante.dni = dni_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_buscar_por_nombre_completo(
	IN nombre_completo_ VARCHAR(152)
)
BEGIN
    SELECT estudiante.estudiante_id,estudiante.dni,CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS 
    nombre_completo, estudiante.fecha_nacimiento, estudiante.genero, estudiante.numero_telefonico FROM infinite_knowledge.estudiante
    WHERE CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) 
    LIKE CONCAT('%',nombre_completo_,'%') ORDER BY estudiante.estudiante_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_buscar_nombre_completo_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS nombre_completo FROM infinite_knowledge.estudiante WHERE 
    estudiante.dni = dni_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_listar(
)
BEGIN
    SELECT DISTINCT estudiante.estudiante_id,estudiante.dni,CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS 
    nombre_completo, estudiante.fecha_nacimiento, estudiante.genero, estudiante.numero_telefonico FROM infinite_knowledge.estudiante ORDER BY estudiante.estudiante_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_listar_para_docente(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT DISTINCT estudiante.estudiante_id,estudiante.dni,CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS 
    nombre_completo, estudiante.fecha_nacimiento, estudiante.genero, estudiante.numero_telefonico FROM ((infinite_knowledge.estudiante INNER JOIN
    infinite_knowledge.registro_asistencias ON estudiante.estudiante_id = registro_asistencias.estudiante_id) INNER JOIN infinite_knowledge.docente ON
    docente.docente_id = registro_asistencias.docente_id) INNER JOIN curso ON curso.curso_id = registro_asistencias.curso_id WHERE docente.dni = dni_ ORDER BY estudiante.estudiante_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_listar_nombres(
)
BEGIN
    SELECT estudiante.estudiante_id,CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',estudiante.nombre) AS nombre_completo FROM infinite_knowledge.estudiante ORDER BY estudiante.estudiante_id ASC; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_eliminar(
	IN estudiante_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.estudiante WHERE estudiante.estudiante_id = estudiante_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_estudiante_actualizar(
	IN estudiante_id_ INT,
    dni_ CHAR(8),
    nombre_ VARCHAR(50),
    apellido_paterno_ VARCHAR(50),
    apellido_materno_ VARCHAR(50),
    fecha_nacimiento_ DATE,
    genero_ VARCHAR(6),
    numero_telefonico_ CHAR(9)
)
BEGIN
    UPDATE infinite_knowledge.estudiante SET estudiante.dni=dni_,estudiante.nombre=nombre_,estudiante.apellido_paterno=apellido_paterno_,estudiante.apellido_materno=
    apellido_materno_,estudiante.fecha_nacimiento=fecha_nacimiento_,estudiante.genero=genero_,estudiante.numero_telefonico=numero_telefonico_ WHERE 
    estudiante.estudiante_id = estudiante_id_; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_insertar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT,
    salon_clases_ CHAR(2),
    n_asistencias_realizadas_ SMALLINT,
    n_justificaciones_realizadas_ SMALLINT,
    fecha_emision_ DATE
)
BEGIN
    INSERT INTO infinite_knowledge.registro_asistencias(registro_asistencias.docente_id,registro_asistencias.estudiante_id,
    registro_asistencias.curso_id,registro_asistencias.salon_clases,registro_asistencias.n_asistencias_realizadas,
    registro_asistencias.n_justificaciones_realizadas,registro_asistencias.fecha_emision) 
    VALUES (docente_id_,estudiante_id_,curso_id_,salon_clases_,n_asistencias_realizadas_,n_justificaciones_realizadas_,fecha_emision_);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_actualizar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT,
    salon_clases_ CHAR(2),
    n_asistencias_realizadas_ SMALLINT,
    n_justificaciones_realizadas_ SMALLINT,
    fecha_emision_ DATE
)
BEGIN
    UPDATE infinite_knowledge.registro_asistencias SET registro_asistencias.salon_clases = salon_clases_,
    registro_asistencias.n_asistencias_realizadas = n_asistencias_realizadas_,
    registro_asistencias.n_justificaciones_realizadas = n_justificaciones_realizadas_,registro_asistencias.fecha_emision = fecha_emision_ WHERE 
    registro_asistencias.docente_id = docente_id_ AND registro_asistencias.estudiante_id = estudiante_id_ 
    AND registro_asistencias.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_buscar_por_id_de_estudiante(
    IN estudiante_id_ INT
)
BEGIN
    SELECT registro_asistencias.docente_id, registro_asistencias.estudiante_id, registro_asistencias.curso_id,
    CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_asistencias.salon_clases, registro_asistencias.n_asistencias_realizadas AS 
    asistencias, registro_asistencias.n_faltas_realizadas AS faltas,  registro_asistencias.n_justificaciones_realizadas AS justificaciones, 
    registro_asistencias.n_total_asistencias AS total, registro_asistencias.fecha_emision AS emision
    FROM (((infinite_knowledge.registro_asistencias INNER JOIN 
    infinite_knowledge.docente ON registro_asistencias.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_asistencias.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_asistencias.curso_id = curso.curso_id) 
    WHERE registro_asistencias.estudiante_id = estudiante_id_ ORDER BY docente.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_buscar_por_dni_de_estudiante(
   IN dni_ CHAR(8),
   curso_id_ INT
)
BEGIN
    SELECT registro_asistencias.docente_id, registro_asistencias.estudiante_id, registro_asistencias.curso_id, 
    CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_asistencias.salon_clases, registro_asistencias.n_asistencias_realizadas AS 
    asistencias, registro_asistencias.n_faltas_realizadas AS faltas,  registro_asistencias.n_justificaciones_realizadas AS justificaciones, 
    registro_asistencias.n_total_asistencias AS total, registro_asistencias.fecha_emision AS emision
    FROM (((infinite_knowledge.registro_asistencias INNER JOIN 
    infinite_knowledge.docente ON registro_asistencias.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_asistencias.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_asistencias.curso_id = curso.curso_id) 
    WHERE estudiante.dni = dni_ AND curso.curso_id = curso_id_ ORDER BY docente.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_buscar_para_docente(
   IN dni_ CHAR(8),
   curso_id_ INT
)
BEGIN
    SELECT registro_asistencias.docente_id, registro_asistencias.estudiante_id, registro_asistencias.curso_id,
    CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_asistencias.salon_clases, registro_asistencias.n_asistencias_realizadas AS 
    asistencias, registro_asistencias.n_faltas_realizadas AS faltas,  registro_asistencias.n_justificaciones_realizadas AS justificaciones, 
    registro_asistencias.n_total_asistencias AS total, registro_asistencias.fecha_emision AS emision
    FROM (((infinite_knowledge.registro_asistencias INNER JOIN 
    infinite_knowledge.docente ON registro_asistencias.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_asistencias.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_asistencias.curso_id = curso.curso_id) 
    WHERE docente.dni = dni_ AND curso.curso_id = curso_id_ ORDER BY estudiante.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_buscar_registro_especifico(
    IN estudiante_id_ INT,
    docente_id_ INT,
    curso_id_ INT
)
BEGIN
    SELECT registro_asistencias.docente_id, registro_asistencias.estudiante_id, registro_asistencias.curso_id,
    CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_asistencias.salon_clases, registro_asistencias.n_asistencias_realizadas AS 
    asistencias, registro_asistencias.n_faltas_realizadas AS faltas,  registro_asistencias.n_justificaciones_realizadas AS justificaciones, 
    registro_asistencias.n_total_asistencias AS total, registro_asistencias.fecha_emision AS emision
    FROM (((infinite_knowledge.registro_asistencias INNER JOIN 
    infinite_knowledge.docente ON registro_asistencias.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_asistencias.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_asistencias.curso_id = curso.curso_id) 
    WHERE registro_asistencias.estudiante_id = estudiante_id_ AND registro_asistencias.docente_id = docente_id_ AND registro_asistencias.curso_id = curso_id_ ORDER BY docente.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_eliminar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.registro_asistencias WHERE registro_asistencias.docente_id = docente_id_ AND registro_asistencias.estudiante_id = estudiante_id_ 
	AND registro_asistencias.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_insertar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT,
	salon_clases_ CHAR(2),
    calif1_ TINYINT,
    calif2_ TINYINT,
    calif3_ TINYINT,
    fecha_emision_ DATE
)
BEGIN
    INSERT INTO infinite_knowledge.registro_calificaciones(registro_calificaciones.docente_id,registro_calificaciones.estudiante_id,
    registro_calificaciones.curso_id,registro_calificaciones.salon_clases,registro_calificaciones.calif1,registro_calificaciones.calif2,registro_calificaciones.calif3,
    registro_calificaciones.fecha_emision) VALUES (docente_id_,estudiante_id_,curso_id_,salon_clases_,calif1_,calif2_,calif3_,fecha_emision_);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_actualizar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT,
	salon_clases_ CHAR(2),
    calif1_ TINYINT,
    calif2_ TINYINT,
    calif3_ TINYINT,
    fecha_emision_ DATE
)
BEGIN
    UPDATE infinite_knowledge.registro_calificaciones SET registro_calificaciones.salon_clases = salon_clases_, registro_calificaciones.calif1 = calif1_, 
    registro_calificaciones.calif2 = calif2_, registro_calificaciones.calif3 = calif3_, registro_calificaciones.fecha_emision = fecha_emision_ WHERE 
    registro_calificaciones.docente_id = docente_id_ AND registro_calificaciones.estudiante_id = estudiante_id_
    AND registro_calificaciones.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_buscar_por_id_de_estudiante(
    IN estudiante_id_ INT
)
BEGIN
    SELECT CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_calificaciones.salon_clases ,registro_calificaciones.calif1, 
    registro_calificaciones.calif2, registro_calificaciones.calif3, registro_calificaciones.promedio_final AS promedio, registro_calificaciones.estado_aprobacion AS estado, 
    registro_calificaciones.fecha_emision AS emision FROM (((infinite_knowledge.registro_calificaciones INNER JOIN 
    infinite_knowledge.docente ON registro_calificaciones.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_calificaciones.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_calificaciones.curso_id = curso.curso_id)  WHERE registro_calificaciones.estudiante_id = estudiante_id_ ORDER BY docente.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_buscar_por_dni_de_estudiante(
    IN dni_ CHAR(8),
    curso_id_ INT
)
BEGIN
    SELECT CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_calificaciones.salon_clases ,registro_calificaciones.calif1, 
    registro_calificaciones.calif2, registro_calificaciones.calif3, registro_calificaciones.promedio_final AS promedio, registro_calificaciones.estado_aprobacion AS estado, 
    registro_calificaciones.fecha_emision AS emision FROM (((infinite_knowledge.registro_calificaciones INNER JOIN 
    infinite_knowledge.docente ON registro_calificaciones.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_calificaciones.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_calificaciones.curso_id = curso.curso_id)  WHERE estudiante.dni = dni_ AND curso.curso_id = curso_id_ ORDER BY docente.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_buscar_para_docente(
    IN dni_ CHAR(8),
    curso_id_ INT
)
BEGIN
    SELECT docente.docente_id, estudiante.estudiante_id, curso.curso_id, CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_calificaciones.salon_clases ,registro_calificaciones.calif1, 
    registro_calificaciones.calif2, registro_calificaciones.calif3, registro_calificaciones.promedio_final AS promedio, registro_calificaciones.estado_aprobacion AS estado, 
    registro_calificaciones.fecha_emision AS emision FROM (((infinite_knowledge.registro_calificaciones INNER JOIN 
    infinite_knowledge.docente ON registro_calificaciones.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_calificaciones.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_calificaciones.curso_id = curso.curso_id)  WHERE docente.dni = dni_ AND curso.curso_id = curso_id_ ORDER BY estudiante.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_buscar_registro_especifico(
    IN estudiante_id_ INT,
    docente_id_ INT,
    curso_id_ INT
)
BEGIN
    SELECT CONCAT(docente.apellido_paterno,' ',docente.apellido_materno,' ',docente.nombre) AS docente, CONCAT(estudiante.apellido_paterno,' ',estudiante.apellido_materno,' ',
    estudiante.nombre) AS estudiante, curso.nombre AS curso, registro_calificaciones.salon_clases ,registro_calificaciones.calif1, 
    registro_calificaciones.calif2, registro_calificaciones.calif3, registro_calificaciones.promedio_final AS promedio, registro_calificaciones.estado_aprobacion AS estado, 
    registro_calificaciones.fecha_emision AS emision FROM (((infinite_knowledge.registro_calificaciones INNER JOIN 
    infinite_knowledge.docente ON registro_calificaciones.docente_id = docente.docente_id) INNER JOIN infinite_knowledge.estudiante ON registro_calificaciones.estudiante_id = 
    estudiante.estudiante_id) INNER JOIN curso ON registro_calificaciones.curso_id = curso.curso_id)  WHERE estudiante.estudiante_id = estudiante_id_ AND 
    docente.docente_id = docente_id_ AND curso.curso_id = curso_id_ ORDER BY estudiante.apellido_paterno ASC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_eliminar(
	IN docente_id_ INT,
    estudiante_id_ INT,
    curso_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.registro_calificaciones WHERE registro_calificaciones.docente_id = docente_id_ AND registro_calificaciones.estudiante_id = estudiante_id_ 
	AND registro_calificaciones.curso_id = curso_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_insertar(
	IN dni_ CHAR(8),
    correo_electronico_ VARCHAR(100),
    contrasenia_ VARCHAR(50),
    rol_ TINYINT
)
BEGIN
    INSERT INTO infinite_knowledge.usuario(usuario.dni,usuario.correo_electronico,usuario.contrasenia,usuario.rol) VALUES (dni_,correo_electronico_,md5(contrasenia_),rol_);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_actualizar(
	IN usuario_id_ INT,
    dni_ CHAR(8),
    correo_electronico_ VARCHAR(100),
    contrasenia_ VARCHAR(50),
    rol_ TINYINT
)
BEGIN
    UPDATE infinite_knowledge.usuario SET usuario.dni=dni_,usuario.correo_electronico = correo_electronico_,usuario.contrasenia = md5(contrasenia_),usuario.rol = rol_ 
    WHERE usuario.usuario_id = usuario_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_eliminar(
	IN usuario_id_ INT
)
BEGIN
    DELETE FROM infinite_knowledge.usuario WHERE usuario.usuario_id = usuario_id_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_realizar_inicio_de_sesión(
	IN correo_electronico_ VARCHAR(100),
    contrasenia_ VARCHAR(50)
)
BEGIN
    SELECT usuario.usuario_id, usuario.dni, usuario.rol FROM infinite_knowledge.usuario WHERE usuario.correo_electronico = correo_electronico_ AND usuario.contrasenia = 
    md5(contrasenia_);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_contar_usuarios_por_rol(
	IN rol_ TINYINT
)
BEGIN
    SELECT COUNT(usuario.usuario_id) AS cantidad FROM infinite_knowledge.usuario WHERE usuario.rol = rol_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_buscar_correo_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT usuario.correo_electronico FROM infinite_knowledge.usuario WHERE usuario.dni = dni_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_usuario_buscar_rol_por_dni(
	IN dni_ CHAR(8)
)
BEGIN
    SELECT usuario.rol FROM infinite_knowledge.usuario WHERE usuario.dni = dni_;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_asistencias_total_asistencias_c(
	n_total_asistencias_ SMALLINT
)
BEGIN
    DECLARE bandera BOOLEAN DEFAULT FALSE;
    DECLARE estudiante_id_ INT;
    DECLARE docente_id_ INT;
    DECLARE curso_id_ INT;
    DECLARE c1 cursor FOR SELECT registro_asistencias.estudiante_id,registro_asistencias.docente_id,registro_asistencias.curso_id
    FROM infinite_knowledge.registro_asistencias;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET bandera = TRUE;

    OPEN c1;
    c1_loop: LOOP
    FETCH c1 INTO estudiante_id_,docente_id_,curso_id_;
    	IF bandera THEN LEAVE c1_loop;
		END IF;
        
	UPDATE infinite_knowledge.registro_asistencias SET registro_asistencias.n_total_asistencias = n_total_asistencias_ WHERE registro_asistencias.estudiante_id = estudiante_id_
    AND registro_asistencias.docente_id = docente_id_ AND registro_asistencias.curso_id = curso_id_; 
	
	UPDATE infinite_knowledge.registro_asistencias SET registro_asistencias.n_faltas_realizadas =  registro_asistencias.n_total_asistencias-
    (registro_asistencias.n_asistencias_realizadas+registro_asistencias.n_justificaciones_realizadas);   

    END LOOP c1_loop;
    CLOSE c1;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_registro_calificaciones_actualizar_datos_c(
	
)
BEGIN
    DECLARE bandera BOOLEAN DEFAULT FALSE;
    DECLARE estudiante_id_ INT;
    DECLARE docente_id_ INT;
    DECLARE curso_id_ INT;
    DECLARE c1 cursor FOR SELECT registro_calificaciones.estudiante_id,registro_calificaciones.docente_id,registro_calificaciones.curso_id 
    FROM infinite_knowledge.registro_calificaciones;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET bandera = TRUE;

    OPEN c1;
    c1_loop: LOOP
    FETCH c1 INTO estudiante_id_,docente_id_,curso_id_;
    	IF bandera THEN LEAVE c1_loop;
		END IF;
        
        UPDATE infinite_knowledge.registro_calificaciones SET registro_calificaciones.promedio_final = CAST(((registro_calificaciones.calif1+registro_calificaciones.calif2+
        registro_calificaciones.calif3)/3) AS SIGNED) WHERE registro_calificaciones.estudiante_id = estudiante_id_ AND registro_calificaciones.docente_id = docente_id_ AND 
        registro_calificaciones.curso_id = curso_id_;
        
        IF (CAST(((registro_calificaciones.calif1+registro_calificaciones.calif2+registro_calificaciones.calif3)/3) AS SIGNED) < 11) THEN 
        	UPDATE infinite_knowledge.registro_calificaciones SET registro_calificaciones.estado_aprobacion = "Desaprobado" WHERE registro_calificaciones.estudiante_id = 
            estudiante_id_ AND registro_calificaciones.docente_id = docente_id_ AND registro_calificaciones.curso_id = curso_id_;
        
        ELSEIF ((CAST(((registro_calificaciones.calif1+registro_calificaciones.calif2+registro_calificaciones.calif3)/3) AS SIGNED) > 11) AND 
        (CAST(((registro_calificaciones.calif1+registro_calificaciones.calif2+registro_calificaciones.calif3)/3) AS SIGNED) < 18)) THEN 
        	UPDATE infinite_knowledge.registro_calificaciones SET registro_calificaciones.estado_aprobacion = "Aprobado" WHERE registro_calificaciones.estudiante_id = estudiante_id_ 
            AND registro_calificaciones.docente_id = docente_id_ AND registro_calificaciones.curso_id = curso_id_;
        
        ELSE
        	UPDATE infinite_knowledge.registro_calificaciones SET registro_calificaciones.estado_aprobacion = "Aprobado con mérito" WHERE registro_calificaciones.estudiante_id = estudiante_id_
            AND registro_calificaciones.docente_id = docente_id_ AND registro_calificaciones.curso_id = curso_id_;
        END IF;    
        
    END LOOP c1_loop;
    CLOSE c1;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_auxiliar_academico_actualizar_au AFTER UPDATE ON infinite_knowledge.auxiliar_academico FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.usuario SET usuario.dni = NEW.dni WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;


DELIMITER //
CREATE TRIGGER t_auxiliar_academico_eliminar_bd BEFORE DELETE ON infinite_knowledge.auxiliar_academico FOR EACH ROW
BEGIN 
	DELETE FROM infinite_knowledge.usuario WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_director_academico_actualizar_au AFTER UPDATE ON infinite_knowledge.director_academico FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.usuario SET usuario.dni = NEW.dni WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_director_academico_eliminar_bd BEFORE DELETE ON infinite_knowledge.director_academico FOR EACH ROW
BEGIN 
	DELETE FROM infinite_knowledge.usuario WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_docente_actualizar_au AFTER UPDATE ON infinite_knowledge.docente FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.usuario SET usuario.dni = NEW.dni WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_docente_aumentar_n_docentes_ai AFTER INSERT ON infinite_knowledge.docente FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.auxiliar_academico SET auxiliar_academico.n_docentes_a_cargo = auxiliar_academico.n_docentes_a_cargo+1;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_docente_diminuir_n_docentes_ad AFTER DELETE ON infinite_knowledge.docente FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.auxiliar_academico SET auxiliar_academico.n_docentes_a_cargo = auxiliar_academico.n_docentes_a_cargo-1;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_docente_eliminar_bd BEFORE DELETE ON infinite_knowledge.docente FOR EACH ROW
BEGIN 
	DELETE FROM infinite_knowledge.usuario WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_estudiante_actualizar_au AFTER UPDATE ON infinite_knowledge.estudiante FOR EACH ROW
BEGIN 
	UPDATE infinite_knowledge.usuario SET usuario.dni = NEW.dni WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER t_estudiante_eliminar_bd BEFORE DELETE ON infinite_knowledge.estudiante FOR EACH ROW
BEGIN 
	DELETE FROM infinite_knowledge.usuario WHERE usuario.dni = OLD.dni;
END //
DELIMITER ;